package com.nexage.app.util.assemblers;

import com.nexage.admin.core.enums.Owner;
import com.nexage.admin.core.enums.TagType;
import com.nexage.admin.core.model.Company;
import com.nexage.admin.core.model.RTBProfile;
import com.nexage.admin.core.model.SellerAttributes;
import com.nexage.admin.core.model.Site;
import com.nexage.admin.core.model.Tag;
import com.nexage.admin.core.sparta.jpa.model.SiteDealTerm;
import com.nexage.admin.core.sparta.jpa.model.TagController;
import com.nexage.admin.core.sparta.jpa.model.TagRule;
import com.nexage.app.dto.Status;
import com.nexage.app.dto.publisher.PublisherBuyerDTO;
import com.nexage.app.dto.publisher.PublisherDefaultRTBProfileDTO;
import com.nexage.app.dto.publisher.PublisherPositionDTO;
import com.nexage.app.dto.publisher.PublisherSiteDTO;
import com.nexage.app.dto.publisher.PublisherSiteDealTermDTO;
import com.nexage.app.dto.publisher.PublisherTagDTO;
import com.nexage.app.dto.publisher.PublisherTagRuleDTO;
import com.nexage.app.error.ServerErrorCodes;
import com.nexage.app.mapper.PublisherTagControllerDTOMapper;
import com.nexage.app.mapper.PublisherTagRuleDTOMapper;
import com.nexage.app.security.UserContext;
import com.nexage.app.services.SellerSiteService;
import com.nexage.app.util.RevenueUtils;
import com.nexage.app.util.assemblers.context.PublisherDefaultRTBProfileContext;
import com.nexage.app.util.assemblers.context.PublisherRTBProfileContext;
import com.nexage.app.util.assemblers.context.PublisherTagContext;
import com.ssp.geneva.common.error.exception.GenevaValidationException;
import com.ssp.geneva.common.security.error.GenevaSecurityException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

@RequiredArgsConstructor
@Component
public class PublisherTagAssembler extends Assembler<PublisherTagDTO, Tag, PublisherTagContext> {

  public static final Set<String> DEFAULT_FIELDS =
      Set.of(
          "pid",
          "version",
          "name",
          "site",
          "rtbProfile",
          "ecpmAuto",
          "ecpmManual",
          "owner",
          "status",
          "buyer",
          "position",
          "primaryId",
          "primaryName",
          "secondaryId",
          "secondaryName",
          "videoAllowed",
          "adSize",
          "ecpmProvision",
          "adNetReportUserName",
          "adNetReportPassword",
          "insterstitial",
          "blockedAdCategories",
          "blockedAdvertisers",
          "rules",
          "tagType",
          "screenLocation",
          "height",
          "width",
          "videoSupport",
          "videoLinearity",
          "adNetReportApiKey",
          "adNetReportApiToken",
          "monetization",
          "autogenerated",
          "importRevenueFlag",
          "tagController");

  public static final Set<String> DEFAULT_RTBPROFILE_FIELDS =
      Set.of(
          "pid",
          "version",
          "name",
          "ecpmAuto",
          "ecpmManual",
          "owner",
          "status",
          "buyer",
          "primaryId",
          "primaryName",
          "secondaryId",
          "secondaryName",
          "videoAllowed",
          "adSize",
          "ecpmProvision",
          "adNetReportUserName",
          "adNetReportPassword",
          "insterstitial",
          "blockedAdCategories",
          "blockedAdvertisers",
          "rules",
          "tagType",
          "screenLocation",
          "height",
          "width",
          "videoSupport",
          "videoLinearity",
          "adNetReportApiKey",
          "adNetReportApiToken",
          "monetization",
          "autogenerated",
          "importRevenueFlag",
          "tagController");

  public static final Set<String> ALL_FIELDS =
      Set.of(
          "pid",
          "version",
          "name",
          "site",
          "rtbProfile",
          "ecpmAuto",
          "ecpmManual",
          "owner",
          "status",
          "buyer",
          "position",
          "primaryId",
          "primaryName",
          "secondaryId",
          "secondaryName",
          "videoAllowed",
          "adSize",
          "ecpmProvision",
          "adNetReportUserName",
          "adNetReportPassword",
          "insterstitial",
          "blockedAdCategories",
          "blockedAdvertisers",
          "rules",
          "tagType",
          "screenLocation",
          "height",
          "width",
          "videoSupport",
          "videoLinearity",
          "adNetReportApiKey",
          "adNetReportApiToken",
          "monetization",
          "autogenerated",
          "importRevenueFlag",
          "tagController",
          "rtbFloor",
          "rtbDescription",
          "buyerClass",
          "urlTemplate",
          "postTemplate",
          "getTemplate",
          "additionalPost",
          "additionalGet",
          "noAdRegex",
          "clickthroughDisable",
          "adSpaceIdTemplate",
          "adSpaceNameTemplate",
          "postProcessTemplate",
          "httpHeaderTemplate",
          "buyerName",
          "buyerLogo",
          "returnRawResponse",
          "interstitial",
          "currentDealTerm");

  private final PublisherRTBProfileAssembler publisherRTBProfileAssembler;
  private final SellerSiteService sellerSiteService;
  private final UserContext userContext;

  public PublisherTagDTO make(final PublisherTagContext context, final Tag tag) {
    return make(context, tag, userContext.isNexageUser() ? ALL_FIELDS : DEFAULT_FIELDS);
  }

  public PublisherTagDTO make(
      final PublisherTagContext context, final Tag tag, final Set<String> fields) {
    PublisherTagDTO.Builder publisherTagBuilder = PublisherTagDTO.newBuilder();

    Set<String> fieldsToMap = (fields != null) ? fields : DEFAULT_FIELDS;

    Site site = null;

    for (String field : fieldsToMap) {

      switch (field) {
        case "pid":
          publisherTagBuilder.withPid(tag.getPid());
          break;
        case "version":
          publisherTagBuilder.withVersion(tag.getVersion());
          break;
        case "name":
          publisherTagBuilder.withName(tag.getName());
          break;
        case "site":
          if (tag.getSite().getPid() != null) {
            publisherTagBuilder.withSite(
                PublisherSiteDTO.newBuilder().withPid(tag.getSite().getPid()).build());
          }
          break;
        case "rtbProfile":
          if (tag.isExchangeTag() && tag.getSite().getPid() != null) {
            if (site == null) site = sellerSiteService.getSite(tag.getSite().getPid());
            if (site.getRtbProfiles() != null) {
              for (RTBProfile profile : site.getRtbProfiles()) {
                if (profile.getExchangeSiteTagId().equals(tag.getPrimaryId())) {
                  PublisherRTBProfileContext profileContext =
                      PublisherRTBProfileContext.newBuilder().withSite(site).withTag(tag).build();

                  publisherTagBuilder.withRtbProfile(
                      publisherRTBProfileAssembler.make(profileContext, profile));
                  break;
                }
              }
            }
          }
          break;
        case "tagType":
          publisherTagBuilder.withTagType(tag.isExchangeTag() ? TagType.RTB : TagType.Mediation);
          break;
        case "ecpmAuto":
          if (site != null || tag.getSite() != null) {
            if (site == null) site = sellerSiteService.getSite(tag.getSite().getPid());
            publisherTagBuilder.withEcpmAuto(
                RevenueUtils.calculatePublisherEcpm(site, tag, tag.getEcpmAuto()).doubleValue());
          }
          break;
        case "ecpmManual":
          if (site != null || tag.getSite() != null) {
            if (site == null) site = sellerSiteService.getSite(tag.getSite().getPid());
            publisherTagBuilder.withEcpmManual(
                RevenueUtils.calculatePublisherEcpm(site, tag, tag.getEcpmManual()).doubleValue());
          }
          break;
        case "owner":
          publisherTagBuilder.withOwner(Owner.valueOf(tag.getOwner().name()));
          break;
        case "status":
          publisherTagBuilder.withStatus(Status.valueOf(tag.getStatus().name()));
          break;
        case "buyer":
          publisherTagBuilder.withBuyer(
              PublisherBuyerDTO.newBuilder().withPid(tag.getBuyerPid()).build());
          break;
        case "position":
          if (tag.isPublisherSelfServeTag()) {
            publisherTagBuilder.withPosition(
                PublisherPositionDTO.builder().withPid(tag.getPosition().getPid()).build());
          }
          break;
        case "primaryId":
          publisherTagBuilder.withPrimaryId(tag.getPrimaryId());
          break;
        case "primaryName":
          publisherTagBuilder.withPrimaryName(tag.getPrimaryName());
          break;
        case "secondaryId":
          publisherTagBuilder.withSecondaryId(tag.getSecondaryId());
          break;
        case "secondaryName":
          publisherTagBuilder.withSecondaryName(tag.getSecondaryName());
          break;
        case "videoAllowed":
          publisherTagBuilder.withVideoAllowed(tag.getIsVideoAllowed());
          break;
        case "adSize":
          publisherTagBuilder.withAdSize(tag.getAdSize());
          break;
        case "ecpmProvision":
          publisherTagBuilder.withEcpmProvision(tag.getEcpmProvision());
          break;
        case "adNetReportUserName":
          publisherTagBuilder.withAdNetReportUserName(tag.getAdNetReportUserName());
          break;
        case "adNetReportPassword":
          publisherTagBuilder.withAdNetReportPassword(tag.getAdNetReportPassword());
          break;
        case "adNetReportApiKey":
          publisherTagBuilder.withAdNetReportApiKey(tag.getApiKey());
          break;
        case "adNetReportApiToken":
          publisherTagBuilder.withAdNetReportApiToken(tag.getApiToken());
          break;
        case "insterstitial":
          publisherTagBuilder.withInsterstitial(tag.getIsInterstitial());
          break;
        case "screenLocation":
          publisherTagBuilder.withScreenLocation(tag.getScreenLocation());
          break;
        case "height":
          publisherTagBuilder.withHeight(tag.getHeight());
          break;
        case "width":
          publisherTagBuilder.withWidth(tag.getWidth());
          break;
        case "videoSupport":
          publisherTagBuilder.withVideoSupport(tag.getVideoSupport());
          break;
        case "videoLinearity":
          publisherTagBuilder.withVideoLinearity(tag.getVideoLinearity());
          break;
        case "rules":
          if (tag.getRules() != null) {
            for (TagRule rule : tag.getRules()) {
              publisherTagBuilder.withTagRule(PublisherTagRuleDTOMapper.MAPPER.map(rule));
            }
          }
          break;
        case "monetization":
          publisherTagBuilder.withMonetization(tag.getMonetization());
          break;
        case "autogenerated":
          publisherTagBuilder.withIsAutoGenerated(tag.isAutogenerated());
          break;
        case "importRevenueFlag":
          publisherTagBuilder.withImportRevenueFlag(tag.getImportRevenueFlag());
          break;
        case "tagController":
          if (tag.getTagController() != null) {
            publisherTagBuilder.withTagController(
                PublisherTagControllerDTOMapper.MAPPER.map(tag.getTagController()));
          }
          break;
        case "buyerClass":
          {
            publisherTagBuilder.withBuyerClass(tag.getBuyerClass());
          }
          break;
        case "urlTemplate":
          {
            publisherTagBuilder.withUrlTemplate(tag.getUrlTemplate());
          }
          break;
        case "postTemplate":
          {
            publisherTagBuilder.withPostTemplate(tag.getPostTemplate());
          }
          break;
        case "getTemplate":
          {
            publisherTagBuilder.withGetTemplate(tag.getGetTemplate());
          }
          break;
        case "additionalPost":
          {
            publisherTagBuilder.withAdditionalPost(tag.getAdditionalPost());
          }
          break;
        case "additionalGet":
          {
            publisherTagBuilder.withAdditionalGet(tag.getAdditionalGet());
          }
          break;
        case "noAdRegex":
          {
            publisherTagBuilder.withNoAdRegex(tag.getNoAdRegex());
          }
          break;
        case "clickthroughDisable":
          {
            publisherTagBuilder.withClickthroughDisable(tag.getClickthroughDisable());
          }
          break;
        case "adSpaceIdTemplate":
          {
            publisherTagBuilder.withAdSpaceIdTemplate(tag.getAdSpaceIdTemplate());
          }
          break;
        case "adSpaceNameTemplate":
          {
            publisherTagBuilder.withAdSpaceNameTemplate(tag.getAdSpaceNameTemplate());
          }
          break;
        case "postProcessTemplate":
          {
            publisherTagBuilder.withPostProcessTemplate(tag.getPostProcessTemplate());
          }
          break;
        case "httpHeaderTemplate":
          {
            publisherTagBuilder.withHttpHeaderTemplate(tag.getHttpHeaderTemplate());
          }
          break;
        case "buyerName":
          {
            publisherTagBuilder.withBuyerName(tag.getBuyerName());
          }
          break;
        case "buyerLogo":
          {
            publisherTagBuilder.withBuyerLogo(tag.getBuyerLogo());
          }
          break;
        case "returnRawResponse":
          {
            publisherTagBuilder.withReturnRawResponse(tag.getReturnRawResponse());
          }
          break;
        case "currentDealTerm":
          {
            SiteDealTerm currentDealTerm = tag.getCurrentDealTerm();
            if (currentDealTerm != null) {
              PublisherSiteDealTermDTO publisherSiteDealTerm =
                  PublisherSiteDealTermDTO.newBuilder()
                      .withNexageRevenueShare(currentDealTerm.getNexageRevenueShare())
                      .withRtbFee(currentDealTerm.getRtbFee())
                      .build();
              publisherTagBuilder.withCurrentDealTerm(publisherSiteDealTerm);
            }
          }
          break;
        default:
      }
    }

    return publisherTagBuilder.build();
  }

  public Tag apply(final PublisherTagContext context, Tag tag, final PublisherTagDTO publisherTag) {

    boolean isCreate = (tag.getPid() == null);
    boolean isCopy = context.isCopyOperation();
    boolean forDefaultRTBProfile = context.forDefaultRTBProfile();

    validatePublisherTag(context, tag, publisherTag);

    tag.setName(publisherTag.getName());
    tag.setStatus(com.nexage.admin.core.enums.Status.valueOf(publisherTag.getStatus().name()));
    tag.setPrimaryId(publisherTag.getPrimaryId());
    tag.setPrimaryName(publisherTag.getPrimaryName());
    tag.setSecondaryId(publisherTag.getSecondaryId());
    tag.setSecondaryName(publisherTag.getSecondaryName());
    tag.setEcpmProvision(publisherTag.getEcpmProvision());
    tag.setAdNetReportUserName(publisherTag.getAdNetReportUserName());
    tag.setAdNetReportPassword(publisherTag.getAdNetReportPassword());
    tag.setApiKey(publisherTag.getAdNetReportApiKey());
    tag.setApiToken(publisherTag.getAdNetReportApiToken());
    tag.setBuyerPid(publisherTag.getBuyer().getPid());
    tag.setIsInterstitial(publisherTag.getInsterstitial());
    tag.setAdSize(publisherTag.getAdSize());
    tag.setIsVideoAllowed(publisherTag.getVideoAllowed());
    tag.setScreenLocation(publisherTag.getScreenLocation());
    tag.setHeight(publisherTag.getHeight());
    tag.setWidth(publisherTag.getWidth());
    tag.setVideoSupport(publisherTag.getVideoSupport());
    tag.setVideoLinearity(publisherTag.getVideoLinearity());
    tag.setMonetization(publisherTag.getMonetization());
    tag.setImportRevenueFlag(publisherTag.getImportRevenueFlag());

    // if we are creating a tag
    if (isCreate) {
      tag.setAutogenerated(
          publisherTag.getAutogenerated() == null ? false : publisherTag.getAutogenerated());
      tag.setEcpmAuto(0d);

      // if creating an exchange tag
      if (publisherTag.getRtbProfile() != null) {
        tag.setOwner(
            (isCopy && publisherTag.getOwner() != null)
                ? Tag.Owner.valueOf(publisherTag.getOwner().name())
                : Tag.Owner.Nexage);
      } else {
        tag.setOwner(
            (isCopy && publisherTag.getOwner() != null)
                ? Tag.Owner.valueOf(publisherTag.getOwner().name())
                : forDefaultRTBProfile ? Tag.Owner.Nexage : Tag.Owner.Publisher);
      }
    }

    fillDealTerms(tag, publisherTag, isCopy);

    if (context.getSite() != null) { // what to do with ECPM MANUAL
      tag.setEcpmManual(
          RevenueUtils.calculateNexageEcpm(context.getSite(), tag, publisherTag.getEcpmManual())
              .doubleValue());
    } else {
      tag.setEcpmManual(0D);
    }

    Set<TagRule> tagRules = tag.getRules();
    if (tagRules == null) {
      tagRules = new HashSet<>();
      tag.setRules(tagRules);
    }

    Map<Long, PublisherTagRuleDTO> publisherRuleMap = new HashMap<>();
    if (publisherTag.getRules() != null) {
      for (PublisherTagRuleDTO rule : publisherTag.getRules()) {
        if (rule.getPid() != null) {
          publisherRuleMap.put(rule.getPid(), rule);
        } else {
          // a new rule, create and add it
          TagRule tagRule = PublisherTagRuleDTOMapper.MAPPER.map(new TagRule(), rule);
          if (tag.getPid() != null) {
            tagRule.setTag(tag);
          }
          tagRules.add(tagRule);
        }
      }
    }

    // if a rule from tag does not exist in publisherTagRules, remove it
    // if a rule from tag DOES exist, update it.
    Iterator<TagRule> iter = tagRules.iterator();
    while (iter.hasNext()) {
      TagRule rule = iter.next();
      if (rule.getPid() != null) {
        if (!publisherRuleMap.containsKey(rule.getPid())) {
          iter.remove();
        } else {
          PublisherTagRuleDTOMapper.MAPPER.map(rule, publisherRuleMap.get(rule.getPid()));
        }
      }
    }

    if (publisherTag.getTagController() != null) {
      TagController tagController;
      if (tag.getTagController() != null) {
        if (tag.getTagController().getPid().equals(publisherTag.getTagController().getPid())) {
          tagController =
              PublisherTagControllerDTOMapper.MAPPER.map(
                  tag.getTagController(), publisherTag.getTagController());
        } else {
          throw new GenevaValidationException(ServerErrorCodes.SERVER_INVALID_INPUT);
        }
      } else {
        tagController =
            PublisherTagControllerDTOMapper.MAPPER.map(
                new TagController(), publisherTag.getTagController());
        tagController.setTag(tag);
      }
      tag.setTagController(tagController);
    }

    if (userContext.isNexageAdminOrManager()) {
      tag.setBuyerClass(publisherTag.getBuyerClass());
      tag.setUrlTemplate(publisherTag.getUrlTemplate());
      tag.setPostTemplate(publisherTag.getPostTemplate());
      tag.setGetTemplate(publisherTag.getGetTemplate());
      tag.setAdditionalPost(publisherTag.getAdditionalPost());
      tag.setAdditionalGet(publisherTag.getAdditionalGet());
      tag.setNoAdRegex(publisherTag.getNoAdRegex());
      tag.setClickthroughDisable(publisherTag.getClickthroughDisable());
      tag.setAdSpaceIdTemplate(publisherTag.getAdSpaceIdTemplate());
      tag.setAdSpaceNameTemplate(publisherTag.getAdSpaceNameTemplate());
      tag.setPostProcessTemplate(publisherTag.getPostProcessTemplate());
      tag.setHttpHeaderTemplate(publisherTag.getHttpHeaderTemplate());
      tag.setReturnRawResponse(publisherTag.getReturnRawResponse());

      if (publisherTag.getOwner() != null) {
        tag.setOwner(Tag.Owner.valueOf(publisherTag.getOwner().name()));
      }
    }

    return tag;
  }

  protected void addTagToPublisherDefaultRTBProfileDtoBuilder(
      PublisherDefaultRTBProfileDTO.Builder builder,
      PublisherDefaultRTBProfileContext context,
      Set<String> fields) {
    if (Optional.of(context)
            .map(PublisherRTBProfileContext::getCompany)
            .map(Company::getSellerAttributes)
            .map(SellerAttributes::getDefaultRtbProfile)
            .isPresent()
        && fields.contains("tag")) {
      builder.withTag(
          make(
              PublisherTagContext.newBuilder().build(),
              context.getCompany().getSellerAttributes().getDefaultRtbProfile().getTag(),
              PublisherTagAssembler.DEFAULT_RTBPROFILE_FIELDS));
    }
  }

  private void fillDealTerms(Tag tag, final PublisherTagDTO publisherTag, boolean isCopy) {
    SiteDealTerm tagCurrentDealTerm = tag.getCurrentDealTerm();
    if (userContext.isNexageUser()) {
      if (publisherTag.getCurrentDealTerm() == null && isCopy) {
        tagCurrentDealTerm = null;
      } else {
        PublisherSiteDealTermDTO publisherSiteDealTerm =
            publisherTag.getCurrentDealTerm() != null
                ? publisherTag.getCurrentDealTerm()
                : new PublisherSiteDealTermDTO();
        if (tagCurrentDealTerm == null && publisherSiteDealTerm.isNotEmpty()) {
          tagCurrentDealTerm = new SiteDealTerm();
          tagCurrentDealTerm.setDealTermChanged(false);
          tagCurrentDealTerm.setRevenueMode(SiteDealTerm.RevenueMode.REV_SHARE);
        }
        if (tagCurrentDealTerm != null
            && !tagCurrentDealTerm.equalsPss(
                publisherSiteDealTerm.getNexageRevenueShare(), publisherSiteDealTerm.getRtbFee())) {
          tagCurrentDealTerm.setPid(null);
          tagCurrentDealTerm.setNexageRevenueShare(publisherSiteDealTerm.getNexageRevenueShare());
          tagCurrentDealTerm.setRtbFee(publisherSiteDealTerm.getRtbFee());
        }
      }
      tag.setCurrentDealTerm(tagCurrentDealTerm);
    }
  }

  private void validatePublisherTag(
      final PublisherTagContext context, Tag tag, PublisherTagDTO publisherTag) {
    if (tag.getBuyerPid() != null && publisherTag.getBuyer() != null) {
      if (!tag.getBuyerPid().equals(publisherTag.getBuyer().getPid())) {
        throw new GenevaSecurityException(ServerErrorCodes.SERVER_TAG_BUYER_READONLY);
      }
    }

    validateDealTerms(context.getSite(), tag, publisherTag);
  }

  private void validateDealTerms(Site siteDTO, Tag tag, PublisherTagDTO publisherTag) {
    SiteDealTerm siteDealTerm = null;
    if (siteDTO != null) {
      siteDealTerm = siteDTO.getCurrentDealTerm();
      siteDTO.setCurrentDealTerm(siteDealTerm);
    }
    SiteDealTerm tagDealTerm = tag.getCurrentDealTerm();
    PublisherSiteDealTermDTO publisherSiteDealTerm = publisherTag.getCurrentDealTerm();

    if (!userContext.isNexageUser() && publisherSiteDealTerm != null) {
      throw new GenevaValidationException(
          ServerErrorCodes.SERVER_TAG_CURRENT_DEAL_TERM_MODIFYING_NOT_ALLOWED);
    }
    if (userContext.isNexageUser() && publisherSiteDealTerm != null) {
      BigDecimal nexageRevenueShare = publisherSiteDealTerm.getNexageRevenueShare();
      if (nexageRevenueShare != null
          && (nexageRevenueShare.doubleValue() < 0 || nexageRevenueShare.doubleValue() >= 1)) {
        throw new GenevaValidationException(
            ServerErrorCodes.SERVER_TAG_CURRENT_DEAL_TERM_REVENUE_SHARE_WRONG);
      }

      BigDecimal rtbFee = publisherSiteDealTerm.getRtbFee();
      if (rtbFee != null && (rtbFee.doubleValue() < 0 || rtbFee.doubleValue() >= 1)) {
        throw new GenevaValidationException(
            ServerErrorCodes.SERVER_TAG_CURRENT_DEAL_TERM_RTB_FEE_WRONG);
      }

      if (siteDealTerm != null) {
        if (nexageRevenueShare == null) {
          nexageRevenueShare =
              (tagDealTerm != null && tagDealTerm.getNexageRevenueShare() != null)
                  ? tagDealTerm.getNexageRevenueShare()
                  : siteDealTerm.getNexageRevenueShare();
        }
        if (rtbFee == null) {
          rtbFee =
              (tagDealTerm != null && tagDealTerm.getRtbFee() != null)
                  ? tagDealTerm.getRtbFee()
                  : siteDealTerm.getRtbFee();
        }
      }
      if (nexageRevenueShare != null
          && rtbFee != null
          && nexageRevenueShare.add(rtbFee).doubleValue() >= 1) {
        throw new GenevaValidationException(
            ServerErrorCodes.SERVER_TAG_CURRENT_DEAL_TERM_SUM_WRONG);
      }
    }
  }
}
