package com.nexage.app.web.postauctiondiscount;

import static org.springframework.http.MediaType.ALL_VALUE;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

import com.codahale.metrics.annotation.ExceptionMetered;
import com.codahale.metrics.annotation.Timed;
import com.nexage.admin.core.model.postauctiondiscount.PostAuctionDiscount;
import com.nexage.admin.core.validator.CreateGroup;
import com.nexage.admin.core.validator.UpdateGroup;
import com.nexage.app.dto.postauctiondiscount.PostAuctionDiscountDTO;
import com.nexage.app.error.ServerErrorCodes;
import com.nexage.app.services.PostAuctionDiscountService;
import com.ssp.geneva.common.error.exception.GenevaValidationException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.Set;
import javax.validation.groups.Default;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Tag(name = "/v1/post-auction-discounts")
@RestController
@RequestMapping(value = "/v1/post-auction-discounts")
public class PostAuctionDiscountController {

  private final PostAuctionDiscountService service;

  public PostAuctionDiscountController(PostAuctionDiscountService service) {
    this.service = service;
  }

  private static final int PAGEABLE_DEFAULT_SIZE = 10;

  /**
   * GET Method: Retrieve a page of {@link PostAuctionDiscountDTO} available objects based on the
   * query/page parameters. Note that this service is intended to provide a mechanism to discover
   * any available {@link PostAuctionDiscount} entities which are available.
   *
   * @param qf A unique {@link Set} of fields.
   * @param qt The term to be found.
   * @param discountStatus The value to match on the "enabled" field.
   * @param pageable The {@link Pageable} pagination parameters.
   * @return {@link Page} of {@link PostAuctionDiscountDTO} objects based on the query/page
   *     parameters.
   */
  @GetMapping
  public ResponseEntity<Page<PostAuctionDiscountDTO>> getAllPostAuctionDiscounts(
      @Parameter(name = "A set of post auction discount fields to search for the query term.")
          @RequestParam(value = "qf", required = false)
          Set<String> qf,
      @Parameter(name = "A query search term.") @RequestParam(value = "qt", required = false)
          String qt,
      @Parameter(name = "A query for the discountStatus field.")
          @RequestParam(value = "enabled", required = false)
          Boolean discountStatus,
      @PageableDefault(sort = "pid", size = PAGEABLE_DEFAULT_SIZE) Pageable pageable) {
    return ResponseEntity.ok(service.getAll(qf, qt, discountStatus, pageable));
  }

  /**
   * GET Method: Retrieve an existing {@link PostAuctionDiscount} entity as a {@link
   * PostAuctionDiscountDTO} object.
   *
   * @param pid The pid of the {@link PostAuctionDiscount} entity to retrieve.
   * @return {@link ResponseEntity} of type {@link PostAuctionDiscountDTO}.
   */
  @Operation(summary = "Retrieves a post auction discount entity by id.")
  @ApiResponse(content = @Content(schema = @Schema(implementation = PostAuctionDiscount.class)))
  @Timed
  @ExceptionMetered
  @GetMapping(value = "/{pid}", consumes = ALL_VALUE, produces = APPLICATION_JSON_VALUE)
  public ResponseEntity<PostAuctionDiscountDTO> getPostAuctionDiscountById(@PathVariable Long pid) {
    return ResponseEntity.ok(service.get(pid));
  }

  /**
   * POST Method: Create a {@link PostAuctionDiscount} persistent entity using a {@link
   * PostAuctionDiscountDTO} as a template. Validation requires that autogenerated fields be null in
   * this request (e.g. pid = null and version = null).
   *
   * @param postAuctionDiscountDTO The {@link PostAuctionDiscountDTO} to use as a template.
   * @return {@link ResponseEntity} of type {@link PostAuctionDiscountDTO} with autogenerated fields
   *     initialized.
   */
  @Operation(summary = "Create a post auction discount entity.")
  @ApiResponse(content = @Content(schema = @Schema(implementation = PostAuctionDiscountDTO.class)))
  @Timed
  @ExceptionMetered
  @PostMapping(consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
  public ResponseEntity<PostAuctionDiscountDTO> createPostAuctionDiscount(
      @RequestBody @Validated(value = {Default.class, CreateGroup.class})
          PostAuctionDiscountDTO postAuctionDiscountDTO) {
    return ResponseEntity.status(HttpStatus.CREATED).body(service.create(postAuctionDiscountDTO));
  }

  /**
   * PUT Method: Update an existing {@link PostAuctionDiscount} entity using a {@link
   * PostAuctionDiscountDTO} as a template. Validation requires that the pid on the request DTO
   * match the pid in the path of the request.
   *
   * @param pid The pid of the {@link PostAuctionDiscount} entity to update.
   * @param postAuctionDiscountDTO The {@link PostAuctionDiscountDTO} to use as a template.
   * @return {@link ResponseEntity} of type {@link PostAuctionDiscountDTO}.
   */
  @Operation(summary = "Update a post auction discount entity.")
  @ApiResponse(content = @Content(schema = @Schema(implementation = PostAuctionDiscountDTO.class)))
  @Timed
  @ExceptionMetered
  @PutMapping(
      value = "/{pid}",
      consumes = APPLICATION_JSON_VALUE,
      produces = APPLICATION_JSON_VALUE)
  public ResponseEntity<PostAuctionDiscountDTO> updatePostAuctionDiscount(
      @PathVariable Long pid,
      @RequestBody @Validated(value = {Default.class, UpdateGroup.class})
          PostAuctionDiscountDTO postAuctionDiscountDTO) {
    if (!pid.equals(postAuctionDiscountDTO.getPid())) {
      throw new GenevaValidationException(ServerErrorCodes.SERVER_PIDS_MISMATCH);
    }
    return ResponseEntity.ok(service.update(postAuctionDiscountDTO));
  }
}
